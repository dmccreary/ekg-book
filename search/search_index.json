{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Enterprise Knowledge Graph This book is about using scalable graph databases to store large-scale connected information for an entire enterprise. Table of Contents","title":"Home"},{"location":"#enterprise-knowledge-graph","text":"This book is about using scalable graph databases to store large-scale connected information for an entire enterprise. Table of Contents","title":"Enterprise Knowledge Graph"},{"location":"contact/","text":"Contact Please connect with me on LinkedIn: Dan McCreary https://www.linkedin.com/in/danmccreary/ You can find blog on medium: https://dmccreary.medium.com/","title":"Contact"},{"location":"contact/#contact","text":"Please connect with me on LinkedIn: Dan McCreary https://www.linkedin.com/in/danmccreary/ You can find blog on medium: https://dmccreary.medium.com/","title":"Contact"},{"location":"glossary/","text":"Enterprise Knowledge Graph Glossary of Terms Accumulator A type of variable that tracks items as you traverse through a graph. Accumulators can be global or be attached to a specific vertex. Accumulators allow MapReduce style queries where each server node in a cluster does work in its local data and returns consolidated results to the query node. For example, in the query \"count all customers that have returned clothing items\" , each node would return only a single count to the query node. This type of query reduces the amount of communication between nodes in the graph cluster. Bitermporal Modeling A specific case of Temporal Modeling modeling designed to handle historical data along two different timelines. One timeline is concerned with when an event occurred in the real world and the other timeline is concerned when the data was recorded or corrected in a computer system. This makes it possible to rewind the information to \"as it actually was\" in combination with \"as it was recorded\" at some point in time. In order to be able to do so, information cannot be discarded even if it is erroneous. Wikipedia Bitemporal Modeling Business Vocabulary A collection of terms and phrases that have meaning to a specific domain of work. A business vocabulary typically starts out with a flat list of terms in a spreadsheet. The terms are listed with their abbreviations and definitions and how they are used within a specific project or department. As vocabularies grow and mature the individual terms might be grouped together. These groupings become taxonomies and can then be used to automatically classify documents with metadata tags of their preferred labels. Classified documents can have a dramatic increase on the search quality of a search engine. Concept An idea, notion or a unit of thought. Concept elements are the fundamental unit of work in semantics and are in integral part of enterprise knowledge graphs. In practice, each concept is usually associated with a vertex in a graph and has one preferred label in each language such as English. Concepts may have many alternate labels. Concepts are grouped together in Schemas and may be part of one or more Collections. Concept Reference on W3C SKOS Site Concept Graph A graph that stores the core business concepts of a project, department or enterprise. In the ideal world, an enterprise graph will use a combination of machine learning to connect related concepts together. Data Ingestion A process by which data is moved from one or more sources to a destination where it can be stored and further analyzed. The data might be in different formats and come from various sources, including RDBMS, other types of databases, S3 buckets, CSVs, or from streams. Decision Tree A way of storing business rules in a graph. A decision tree contains a series of branches, each branch containing a conditional expression. If the conditional expression returns TRUE, then a true link is traversed. If the conditional returns FALSE and false branch is traversed. Decision trees and the corrisponding rules that are represented as pointer hops in an enterprise knowledge graph have many integration and performance benefits. Departmental Graph A graph designed to store information from one or more departments of an enterprise. Departmental graphs may be limited in that they can't be scaled up to hold enterprise data. Data Layer Raw low-level binary codes that contains information after analysis. Dashboard A set of views, usually presented on a single page, that display information as a set of key performance indicators and charts. In general, dashboard views can be customized for a role or a specific user. DB Engines A web site that harvests web documents that discuss databases and classifies the documents based on a taxonomy of database types. The \"Popularity changes per category report\" is frequently cited in many graph presentations. DB Engines Embedding A data structure, usually a vector of decimal numbers, associated with an item in a graph, that helps users quickly find similar items. Vertices, Edges, and Paths may all have embeddings. Enterprise Knowledge Graph A scalable graph database system used to store large-scale connected information for an entire enterprise. By scalable we mean that it must be able to run on multiple servers as the graph expands. Without scalability the graph might be considered a project or departmental graph. For many large organizations, enterprise knowledge graphs typically have hundreds of developers doing concurrent loading and query development and the models can be dynamic. For example the Google Knowledge Graph team is thought to contain over 1,500 developers. Entity Resolution The process of finding records in a data set that refer to the same entity across different data sources. Entity Resolution is a core technique in converting Information layer data into a consistent knowledge graph. Wikipeia Record Linkage Force Directed Graph A graph layout algorithm that simulates forces on springs that move items Wikipedia Force Directed Graph Drawing Glossary A business vocabulary associated with a topic. A glossary often has both general definitions of terms as well as contextual definitions for a specific domain or project. See also: Business Vocabulary GraphQL A query language for APIs and a runtime for fulfilling those queries with your existing data. Ironically, GraphGL has nothing to do with graph databases other than the fact that the queries often run much faster on graphs. The name \"graph\" was used internally at FaceBook since they store their data in a graph structure. One concern about GraphQL at the enterprise-scale is that your graph database should be able to detect GraphQL queries that are using too many resources. This means your enterprise graph databases must understand concepts of resource quotas . Graph Query Language A proposed standard graph query language being developed by the Working Group 3 (Database Languages) of ISO/IEC JTC 1's Subcommittee 32. GQL is designed to work with Labeled Property Graphs . Wikipedia GQL Page Graph Structured Query Language A distributed graph query language developed by TigerGraph. GSQL was designed to be syntactically similar to the SQL language but it also integrated distributed query concepts that share patterns similar to MapReduce queries. Also known as: GSQL Graph Database A way of storing information in terms of vertices and edges. Graph databases consider edge traversal as a primary performance consideration. By storing edges as in-memory pointers graph databases offer roughly a 1,000x performance improvement over relational database management JOIN operations that must be calculated for each query. See also: Index Free Adjacency Graph Isomorphism A graph can exist in different forms having the same number of vertices, edges, and also the same edge connectivity. Such graphs are called isomorphic graphs. Index Free Adjacency Information Layer Data about our key business entities. This includes Things, like People, Places and Events. Knowledge Layer A layer in the knowledge triangle that contains connected information. The knowledge layer is often the top layer in our views. There are some views that include a Wisdom layer on top of the knowledge layer. Knowledge Triangle A stack of three layers. At the base is the Data Layer , above that the Information Layer and at the top the Knowledge Layer . Labeled Property Graph A graph data model where each Vertex and Edge have a single type and goth Vertices and Edges have attributes. Both TigerGraph and Neo4j use the LPG data model. Also known as: LPG Load-As-Is Pattern A data loading pattern that loads the data into a graph with minimal transformation. Once the data is loaded into the graph the transformation is done in the native language of the graph such as GSQL. This pattern allows many projects to share the underlying data loaders and allows each team to customize the post-loading transformation using the native query language of the graph. The other major data model is the RDF model which is discouraged at Optum due to the challenges with Reification. Reification causes RDF SPARQL queries to be rewritten. Load-as-is pattern See also: RDF On-the-Wire vs. In-the-Can A way of looking at knowledge representation requirements in two domains. On-The-Wire implies that a serialization of a dataset must retain connection information within itself and to other external systems. In-The-Can implies that the representation is optimized for ease of query and sustainability . RDF is optimized for On-The-Wire exchange of knowledge. LPG is optimized for In-The-Can tasks such as ease of query and sustainability. Ontology A graph of Concepts within a specific domain. Ontologies often begin as flat term lists, that become taxonomies that then have more complex relationships than simple broader and narrower concepts. Ontologies are often stored in formats such as SKOS and OWL. Open vs Closed World https://en.wikipedia.org/wiki/Open-world_assumption https://en.wikipedia.org/wiki/Closed-world_assumption Preferred Label A preferred lexical label associated with a Concept . In the SKOS standard, there should be one and only one preferred label per language per concept. Project Graph A graph that supports a specific project. Project graphs may contain knowledge that is not of interest to the rest of the enterprise. Reference Data Reference data is data used to classify or categorize other data. They typically are stored as a set of valid codes for a specific data element. For example the list of Country Codes is a type of reference data. Referenece data is often stored as a short code and a definition of what that code represents. Reification Reification is the process by which an abstract idea about a computer program is turned into an explicit data model or other object created in a programming language. Specifically, in the RDF modeling process it is the process of adding an abstract vertex to a graph when properties are needed in a relationship. Reification causes queries that traverse that node to be rewritten. This means that SPARQL queries are inherently much more difficult to maintain than LPG graph queries. Resource Description Framework An early family of standards developed by the World Wide Web Consortium for exchanging graph data championed by the Semantic Web community starting in 1999. RDF gained some traction around 2010 but failed to gain widespread adoption due to the complexity of the standards and the problems of Reification . Wikipedia Resource Quota The ability to limit the resources consumed by a query such as CPU time, or RAM for individuals or groups. Large enterprise-scale graph databases must carefully monitor and constrain queries that consume too many resources. Many older technologies such as Apache Drill are difficult to implement without the ability to monitor and restrict resources. Role-based Access Control The ability to assign access to a resource to individuals that have a specific role. For Enterprise Knowledge Graphs, there are both high-level subgraph rules and fine-grain rules such as vertex-related role-based access control. Rules Engine A software component that executes rules according to some algorithm. In the Enterprise Knowledge Graph space rules are frequently represented in Decision Tree structures within the graph. [Rules for Knowledge Graph Rules])https://dmccreary.medium.com/rules-for-knowledge-graphs-rules-f22587307a8f Semantics The branch of computer science associated with meaning. It can be best understood by understanding the semantic triangle. The key point of the semantic triangle is that we cannot directly associate a label with a referent without traversing concepts. Shapes Constraint Language A W3C standard RDF vocabulary for validating RDF graphs against a set of conditions. Unlike document validation standards like XML Schema, SHACL assumes that data quality checks should be able to look for relationships in a graph as well as the local context of a document. These conditions are provided as shapes and other constructs expressed in the form of an RDF graph. LPG graphs do not yet have a version of SHACL. Also known as: SHACL SHACL W3C Simple Knowledge Organizational System A model for expressing the basic structure and content of concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, folksonomies, and other similar types of controlled vocabularies. SKOS is also the name of the world-wide-web standard for encoding these systems. Serializations of SKOS are typically done in RDF format although other encodings such as XML and JSON are common. See Also: W3C SKOS Primer See Also: W2C SKOS Referecnce Sustainability The ability for a team of developers to maintain the code that supports an enterprise knowledge graph in the face of changes to the data model. The key measure is to avoide problems related to rewriting graph queries when small changes are made to the graph data model. Temporal Modeling The process of modeling time in a data model. Modeling time can be complex when the requirements of a system require you to be able to recreate detailed reports as they were at a prior point in time. Termporal modeling includes the concept of versioning and bitemporal modeling Triple Store A purpose-built database for the storage and retrieval of RDF triples through semantic queries. Triple stores are not used in most enterprise graphs due to their lack of sustanability due to problems with Reification . https://en.wikipedia.org/wiki/Triplestore Web Ontology Language A Semantic Web language designed to represent rich and complex knowledge about things, groups of things, and relations between things. W3C OWL Web Site","title":"Glossary"},{"location":"glossary/#enterprise-knowledge-graph-glossary-of-terms","text":"","title":"Enterprise Knowledge Graph Glossary of Terms"},{"location":"glossary/#accumulator","text":"A type of variable that tracks items as you traverse through a graph. Accumulators can be global or be attached to a specific vertex. Accumulators allow MapReduce style queries where each server node in a cluster does work in its local data and returns consolidated results to the query node. For example, in the query \"count all customers that have returned clothing items\" , each node would return only a single count to the query node. This type of query reduces the amount of communication between nodes in the graph cluster.","title":"Accumulator"},{"location":"glossary/#bitermporal-modeling","text":"A specific case of Temporal Modeling modeling designed to handle historical data along two different timelines. One timeline is concerned with when an event occurred in the real world and the other timeline is concerned when the data was recorded or corrected in a computer system. This makes it possible to rewind the information to \"as it actually was\" in combination with \"as it was recorded\" at some point in time. In order to be able to do so, information cannot be discarded even if it is erroneous. Wikipedia Bitemporal Modeling","title":"Bitermporal Modeling"},{"location":"glossary/#business-vocabulary","text":"A collection of terms and phrases that have meaning to a specific domain of work. A business vocabulary typically starts out with a flat list of terms in a spreadsheet. The terms are listed with their abbreviations and definitions and how they are used within a specific project or department. As vocabularies grow and mature the individual terms might be grouped together. These groupings become taxonomies and can then be used to automatically classify documents with metadata tags of their preferred labels. Classified documents can have a dramatic increase on the search quality of a search engine.","title":"Business Vocabulary"},{"location":"glossary/#concept","text":"An idea, notion or a unit of thought. Concept elements are the fundamental unit of work in semantics and are in integral part of enterprise knowledge graphs. In practice, each concept is usually associated with a vertex in a graph and has one preferred label in each language such as English. Concepts may have many alternate labels. Concepts are grouped together in Schemas and may be part of one or more Collections. Concept Reference on W3C SKOS Site","title":"Concept"},{"location":"glossary/#concept-graph","text":"A graph that stores the core business concepts of a project, department or enterprise. In the ideal world, an enterprise graph will use a combination of machine learning to connect related concepts together.","title":"Concept Graph"},{"location":"glossary/#data-ingestion","text":"A process by which data is moved from one or more sources to a destination where it can be stored and further analyzed. The data might be in different formats and come from various sources, including RDBMS, other types of databases, S3 buckets, CSVs, or from streams.","title":"Data Ingestion"},{"location":"glossary/#decision-tree","text":"A way of storing business rules in a graph. A decision tree contains a series of branches, each branch containing a conditional expression. If the conditional expression returns TRUE, then a true link is traversed. If the conditional returns FALSE and false branch is traversed. Decision trees and the corrisponding rules that are represented as pointer hops in an enterprise knowledge graph have many integration and performance benefits.","title":"Decision Tree"},{"location":"glossary/#departmental-graph","text":"A graph designed to store information from one or more departments of an enterprise. Departmental graphs may be limited in that they can't be scaled up to hold enterprise data.","title":"Departmental Graph"},{"location":"glossary/#data-layer","text":"Raw low-level binary codes that contains information after analysis.","title":"Data Layer"},{"location":"glossary/#dashboard","text":"A set of views, usually presented on a single page, that display information as a set of key performance indicators and charts. In general, dashboard views can be customized for a role or a specific user.","title":"Dashboard"},{"location":"glossary/#db-engines","text":"A web site that harvests web documents that discuss databases and classifies the documents based on a taxonomy of database types. The \"Popularity changes per category report\" is frequently cited in many graph presentations. DB Engines","title":"DB Engines"},{"location":"glossary/#embedding","text":"A data structure, usually a vector of decimal numbers, associated with an item in a graph, that helps users quickly find similar items. Vertices, Edges, and Paths may all have embeddings.","title":"Embedding"},{"location":"glossary/#enterprise-knowledge-graph","text":"A scalable graph database system used to store large-scale connected information for an entire enterprise. By scalable we mean that it must be able to run on multiple servers as the graph expands. Without scalability the graph might be considered a project or departmental graph. For many large organizations, enterprise knowledge graphs typically have hundreds of developers doing concurrent loading and query development and the models can be dynamic. For example the Google Knowledge Graph team is thought to contain over 1,500 developers.","title":"Enterprise Knowledge Graph"},{"location":"glossary/#entity-resolution","text":"The process of finding records in a data set that refer to the same entity across different data sources. Entity Resolution is a core technique in converting Information layer data into a consistent knowledge graph. Wikipeia Record Linkage","title":"Entity Resolution"},{"location":"glossary/#force-directed-graph","text":"A graph layout algorithm that simulates forces on springs that move items Wikipedia Force Directed Graph Drawing","title":"Force Directed Graph"},{"location":"glossary/#glossary","text":"A business vocabulary associated with a topic. A glossary often has both general definitions of terms as well as contextual definitions for a specific domain or project. See also: Business Vocabulary","title":"Glossary"},{"location":"glossary/#graphql","text":"A query language for APIs and a runtime for fulfilling those queries with your existing data. Ironically, GraphGL has nothing to do with graph databases other than the fact that the queries often run much faster on graphs. The name \"graph\" was used internally at FaceBook since they store their data in a graph structure. One concern about GraphQL at the enterprise-scale is that your graph database should be able to detect GraphQL queries that are using too many resources. This means your enterprise graph databases must understand concepts of resource quotas .","title":"GraphQL"},{"location":"glossary/#graph-query-language","text":"A proposed standard graph query language being developed by the Working Group 3 (Database Languages) of ISO/IEC JTC 1's Subcommittee 32. GQL is designed to work with Labeled Property Graphs . Wikipedia GQL Page","title":"Graph Query Language"},{"location":"glossary/#graph-structured-query-language","text":"A distributed graph query language developed by TigerGraph. GSQL was designed to be syntactically similar to the SQL language but it also integrated distributed query concepts that share patterns similar to MapReduce queries. Also known as: GSQL","title":"Graph Structured Query Language"},{"location":"glossary/#graph-database","text":"A way of storing information in terms of vertices and edges. Graph databases consider edge traversal as a primary performance consideration. By storing edges as in-memory pointers graph databases offer roughly a 1,000x performance improvement over relational database management JOIN operations that must be calculated for each query. See also: Index Free Adjacency","title":"Graph Database"},{"location":"glossary/#graph-isomorphism","text":"A graph can exist in different forms having the same number of vertices, edges, and also the same edge connectivity. Such graphs are called isomorphic graphs.","title":"Graph Isomorphism"},{"location":"glossary/#index-free-adjacency","text":"","title":"Index Free Adjacency"},{"location":"glossary/#information-layer","text":"Data about our key business entities. This includes Things, like People, Places and Events.","title":"Information Layer"},{"location":"glossary/#knowledge-layer","text":"A layer in the knowledge triangle that contains connected information. The knowledge layer is often the top layer in our views. There are some views that include a Wisdom layer on top of the knowledge layer.","title":"Knowledge Layer"},{"location":"glossary/#knowledge-triangle","text":"A stack of three layers. At the base is the Data Layer , above that the Information Layer and at the top the Knowledge Layer .","title":"Knowledge Triangle"},{"location":"glossary/#labeled-property-graph","text":"A graph data model where each Vertex and Edge have a single type and goth Vertices and Edges have attributes. Both TigerGraph and Neo4j use the LPG data model. Also known as: LPG","title":"Labeled Property Graph"},{"location":"glossary/#load-as-is-pattern","text":"A data loading pattern that loads the data into a graph with minimal transformation. Once the data is loaded into the graph the transformation is done in the native language of the graph such as GSQL. This pattern allows many projects to share the underlying data loaders and allows each team to customize the post-loading transformation using the native query language of the graph. The other major data model is the RDF model which is discouraged at Optum due to the challenges with Reification. Reification causes RDF SPARQL queries to be rewritten. Load-as-is pattern See also: RDF","title":"Load-As-Is Pattern"},{"location":"glossary/#on-the-wire-vs-in-the-can","text":"A way of looking at knowledge representation requirements in two domains. On-The-Wire implies that a serialization of a dataset must retain connection information within itself and to other external systems. In-The-Can implies that the representation is optimized for ease of query and sustainability . RDF is optimized for On-The-Wire exchange of knowledge. LPG is optimized for In-The-Can tasks such as ease of query and sustainability.","title":"On-the-Wire vs. In-the-Can"},{"location":"glossary/#ontology","text":"A graph of Concepts within a specific domain. Ontologies often begin as flat term lists, that become taxonomies that then have more complex relationships than simple broader and narrower concepts. Ontologies are often stored in formats such as SKOS and OWL.","title":"Ontology"},{"location":"glossary/#open-vs-closed-world","text":"https://en.wikipedia.org/wiki/Open-world_assumption https://en.wikipedia.org/wiki/Closed-world_assumption","title":"Open vs Closed World"},{"location":"glossary/#preferred-label","text":"A preferred lexical label associated with a Concept . In the SKOS standard, there should be one and only one preferred label per language per concept.","title":"Preferred Label"},{"location":"glossary/#project-graph","text":"A graph that supports a specific project. Project graphs may contain knowledge that is not of interest to the rest of the enterprise.","title":"Project Graph"},{"location":"glossary/#reference-data","text":"Reference data is data used to classify or categorize other data. They typically are stored as a set of valid codes for a specific data element. For example the list of Country Codes is a type of reference data. Referenece data is often stored as a short code and a definition of what that code represents.","title":"Reference Data"},{"location":"glossary/#reification","text":"Reification is the process by which an abstract idea about a computer program is turned into an explicit data model or other object created in a programming language. Specifically, in the RDF modeling process it is the process of adding an abstract vertex to a graph when properties are needed in a relationship. Reification causes queries that traverse that node to be rewritten. This means that SPARQL queries are inherently much more difficult to maintain than LPG graph queries.","title":"Reification"},{"location":"glossary/#resource-description-framework","text":"An early family of standards developed by the World Wide Web Consortium for exchanging graph data championed by the Semantic Web community starting in 1999. RDF gained some traction around 2010 but failed to gain widespread adoption due to the complexity of the standards and the problems of Reification . Wikipedia","title":"Resource Description Framework"},{"location":"glossary/#resource-quota","text":"The ability to limit the resources consumed by a query such as CPU time, or RAM for individuals or groups. Large enterprise-scale graph databases must carefully monitor and constrain queries that consume too many resources. Many older technologies such as Apache Drill are difficult to implement without the ability to monitor and restrict resources.","title":"Resource Quota"},{"location":"glossary/#role-based-access-control","text":"The ability to assign access to a resource to individuals that have a specific role. For Enterprise Knowledge Graphs, there are both high-level subgraph rules and fine-grain rules such as vertex-related role-based access control.","title":"Role-based Access Control"},{"location":"glossary/#rules-engine","text":"A software component that executes rules according to some algorithm. In the Enterprise Knowledge Graph space rules are frequently represented in Decision Tree structures within the graph. [Rules for Knowledge Graph Rules])https://dmccreary.medium.com/rules-for-knowledge-graphs-rules-f22587307a8f","title":"Rules Engine"},{"location":"glossary/#semantics","text":"The branch of computer science associated with meaning. It can be best understood by understanding the semantic triangle. The key point of the semantic triangle is that we cannot directly associate a label with a referent without traversing concepts.","title":"Semantics"},{"location":"glossary/#shapes-constraint-language","text":"A W3C standard RDF vocabulary for validating RDF graphs against a set of conditions. Unlike document validation standards like XML Schema, SHACL assumes that data quality checks should be able to look for relationships in a graph as well as the local context of a document. These conditions are provided as shapes and other constructs expressed in the form of an RDF graph. LPG graphs do not yet have a version of SHACL. Also known as: SHACL SHACL W3C","title":"Shapes Constraint Language"},{"location":"glossary/#simple-knowledge-organizational-system","text":"A model for expressing the basic structure and content of concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, folksonomies, and other similar types of controlled vocabularies. SKOS is also the name of the world-wide-web standard for encoding these systems. Serializations of SKOS are typically done in RDF format although other encodings such as XML and JSON are common. See Also: W3C SKOS Primer See Also: W2C SKOS Referecnce","title":"Simple Knowledge Organizational System"},{"location":"glossary/#sustainability","text":"The ability for a team of developers to maintain the code that supports an enterprise knowledge graph in the face of changes to the data model. The key measure is to avoide problems related to rewriting graph queries when small changes are made to the graph data model.","title":"Sustainability"},{"location":"glossary/#temporal-modeling","text":"The process of modeling time in a data model. Modeling time can be complex when the requirements of a system require you to be able to recreate detailed reports as they were at a prior point in time. Termporal modeling includes the concept of versioning and bitemporal modeling","title":"Temporal Modeling"},{"location":"glossary/#triple-store","text":"A purpose-built database for the storage and retrieval of RDF triples through semantic queries. Triple stores are not used in most enterprise graphs due to their lack of sustanability due to problems with Reification . https://en.wikipedia.org/wiki/Triplestore","title":"Triple Store"},{"location":"glossary/#web-ontology-language","text":"A Semantic Web language designed to represent rich and complex knowledge about things, groups of things, and relations between things. W3C OWL Web Site","title":"Web Ontology Language"},{"location":"table-of-contents/","text":"Enterprise Knowledge Graphs Table of Contents Part 1: Introduction Preface Acknowledgements Chapter 1: Introduction to Enterprise Knowledge Graphs Part 2: Enterprise Knowledge Graphs Concepts The Knowledge Triangle Scale Out Graphs Databases Graph Machine Learning Calculating the Cost and Benefits of Enterprise Knowledge Graphs Part 3: Enterprise Knowledge Graphs Case Studies Customer 360 Analytics Dashboard Product Recomendation Employee Career Paths Strategy Analytics Glossary A listing of the concepts used in this book and their definitions. Link","title":"Table of Contents"},{"location":"table-of-contents/#enterprise-knowledge-graphs-table-of-contents","text":"","title":"Enterprise Knowledge Graphs Table of Contents"},{"location":"table-of-contents/#part-1-introduction","text":"","title":"Part 1: Introduction"},{"location":"table-of-contents/#preface","text":"","title":"Preface"},{"location":"table-of-contents/#acknowledgements","text":"","title":"Acknowledgements"},{"location":"table-of-contents/#chapter-1-introduction-to-enterprise-knowledge-graphs","text":"","title":"Chapter 1: Introduction to Enterprise Knowledge Graphs"},{"location":"table-of-contents/#part-2-enterprise-knowledge-graphs-concepts","text":"","title":"Part 2: Enterprise Knowledge Graphs Concepts"},{"location":"table-of-contents/#the-knowledge-triangle","text":"","title":"The Knowledge Triangle"},{"location":"table-of-contents/#scale-out-graphs-databases","text":"","title":"Scale Out Graphs Databases"},{"location":"table-of-contents/#graph-machine-learning","text":"","title":"Graph Machine Learning"},{"location":"table-of-contents/#calculating-the-cost-and-benefits-of-enterprise-knowledge-graphs","text":"","title":"Calculating the Cost and Benefits of Enterprise Knowledge Graphs"},{"location":"table-of-contents/#part-3-enterprise-knowledge-graphs-case-studies","text":"","title":"Part 3: Enterprise Knowledge Graphs Case Studies"},{"location":"table-of-contents/#customer-360","text":"","title":"Customer 360"},{"location":"table-of-contents/#analytics-dashboard","text":"","title":"Analytics Dashboard"},{"location":"table-of-contents/#product-recomendation","text":"","title":"Product Recomendation"},{"location":"table-of-contents/#employee-career-paths","text":"","title":"Employee Career Paths"},{"location":"table-of-contents/#strategy-analytics","text":"","title":"Strategy Analytics"},{"location":"table-of-contents/#glossary","text":"A listing of the concepts used in this book and their definitions. Link","title":"Glossary"},{"location":"case-studies/analytics-dashboard/","text":"","title":"Analytics dashboard"},{"location":"case-studies/customer-360/","text":"","title":"Customer 360"},{"location":"case-studies/rules-engine/","text":"","title":"Rules engine"},{"location":"case-studies/semantic-search/","text":"","title":"Semantic search"},{"location":"concepts/cost-benefit-analysis/","text":"","title":"Cost benefit analysis"},{"location":"concepts/entity-resolution/","text":"","title":"Entity resolution"},{"location":"concepts/graph-machine-learning/","text":"","title":"Graph machine learning"},{"location":"concepts/knowledge-triangle/","text":"","title":"Knowledge triangle"},{"location":"concepts/scale-out/","text":"","title":"Scale out"},{"location":"intro/","text":"Introduction to Enterprise Knowledge Graphs Preface Preface","title":"Introduction to Enterprise Knowledge Graphs"},{"location":"intro/#introduction-to-enterprise-knowledge-graphs","text":"","title":"Introduction to Enterprise Knowledge Graphs"},{"location":"intro/#preface","text":"Preface","title":"Preface"},{"location":"intro/acknowledgements/","text":"Enterprise Knowledge Graph Acknowledgements I would like to thank the following people: Arun Batchu Nikhil Deshpande Hank Head Jonathan Herke Mark Megerian John Santelli Sujith Sasidharan Ed Sverdlin Sudeep Vishnumurthy Each of them has guided me in my journey in becoming a better storytelling driven solution architect. They have taught me that is critical for us to understand both how technologies work, and to be able to relate the benefits with stories that our stakeholders will remember.","title":"Enterprise Knowledge Graph Acknowledgements"},{"location":"intro/acknowledgements/#enterprise-knowledge-graph-acknowledgements","text":"I would like to thank the following people: Arun Batchu Nikhil Deshpande Hank Head Jonathan Herke Mark Megerian John Santelli Sujith Sasidharan Ed Sverdlin Sudeep Vishnumurthy Each of them has guided me in my journey in becoming a better storytelling driven solution architect. They have taught me that is critical for us to understand both how technologies work, and to be able to relate the benefits with stories that our stakeholders will remember.","title":"Enterprise Knowledge Graph Acknowledgements"},{"location":"intro/graph-database-adoption-trends/","text":"","title":"Graph database adoption trends"},{"location":"intro/introduction/","text":"","title":"Introduction"},{"location":"intro/preface/","text":"","title":"Preface"},{"location":"intro/stories/","text":"Enterprise Knowledge Graph Stories The Google Knowledge Graph On May 16, 2012, Google published the \"Things Not Strings\" blog post. Now the world knew that graphs were no longer an academic interest. Google's graph serviced millions of requests per minute and was available 24X7. Knowlege Graphs became cool. Introducing the Knowledge Graph: things, not strings Glossary to Taxonomy to Ontology to Graph Tracy had a background in library science. She was asked to help a manufacturing company organize their datasets. Stage 1: The Glossary On Tracy's first day on the job, she heard dozens of terms she had never heard before. Many of them were acronyms of internal systems and projects. She started buy writing down the terms that she didn't understand in the first column of a spreadsheet. She put the definitions of the term in the second column. She was building a business glossary. Stage 2: The Taxonomy After a while, Tracy saw some recurring patterns in her terms. Some were computer application names, some were product names and some were \"other\". She started grouping the related terms together and added another column for the category of each term. She had a concept taxonomy. Stage 3: The Ontology After a while, Tracy's categories started to grow and become more complex. Categories had sub-categories and now she started to see relationships between terms. Terms had broader terms and narrower terms. Some teams used different names (or labels) for the same concept. Tracy now had a graph of concepts. She had an ontology. Tracy could no longer maintain the system using a simple spreadsheet. She worked with her peers to create a web front end to a graph database so it was easy for anyone to add and update concepts. Stage 4: Reference Data Her graph database continued to grow. For many concepts she was asked to store a code-set that described the valid values that data element could contain. She was building a reference data set. Here reference data started simply - a list of country codes, a list of state codes and a list of regions that included states. Then they asked her to list all the cities that they sold products. Soon she was tracking all the cities in the world and their long-lat coordinates. But this was OK, because the graph database that Tracy selected scaled well as the data complexity and size grew. State 5: The Project Knowledge Graph The company like the fact that when Tracy was asked to add a new feature it was always done quickly. The data model scaled well and Tracy was not forced to rewrite queries as the data grew. As the request for more data continued Tracy added detailed product information and the customers that used these products. She then got regular updates of customer lists and their customer satisfaction surveys. Now multiple departments wanted access to Tracy's database. She became an enterprise resource. State 6: The Enterprise Knowledge Graph Now that Tracy had more and more customer data and their purchase history, Tracy had to use multiple servers to manage the data. The company also needed to access customer records 24X7 so she put in tools to automatically replicate data and automatically migrated data to new servers as they were added to the cluster. Tracy had built an truly highly available enterprise knowledge graph.","title":"Enterprise Knowledge Graph Stories"},{"location":"intro/stories/#enterprise-knowledge-graph-stories","text":"","title":"Enterprise Knowledge Graph Stories"},{"location":"intro/stories/#the-google-knowledge-graph","text":"On May 16, 2012, Google published the \"Things Not Strings\" blog post. Now the world knew that graphs were no longer an academic interest. Google's graph serviced millions of requests per minute and was available 24X7. Knowlege Graphs became cool. Introducing the Knowledge Graph: things, not strings","title":"The Google Knowledge Graph"},{"location":"intro/stories/#glossary-to-taxonomy-to-ontology-to-graph","text":"Tracy had a background in library science. She was asked to help a manufacturing company organize their datasets.","title":"Glossary to Taxonomy to Ontology to Graph"},{"location":"intro/stories/#stage-1-the-glossary","text":"On Tracy's first day on the job, she heard dozens of terms she had never heard before. Many of them were acronyms of internal systems and projects. She started buy writing down the terms that she didn't understand in the first column of a spreadsheet. She put the definitions of the term in the second column. She was building a business glossary.","title":"Stage 1: The Glossary"},{"location":"intro/stories/#stage-2-the-taxonomy","text":"After a while, Tracy saw some recurring patterns in her terms. Some were computer application names, some were product names and some were \"other\". She started grouping the related terms together and added another column for the category of each term. She had a concept taxonomy.","title":"Stage 2: The Taxonomy"},{"location":"intro/stories/#stage-3-the-ontology","text":"After a while, Tracy's categories started to grow and become more complex. Categories had sub-categories and now she started to see relationships between terms. Terms had broader terms and narrower terms. Some teams used different names (or labels) for the same concept. Tracy now had a graph of concepts. She had an ontology. Tracy could no longer maintain the system using a simple spreadsheet. She worked with her peers to create a web front end to a graph database so it was easy for anyone to add and update concepts.","title":"Stage 3: The Ontology"},{"location":"intro/stories/#stage-4-reference-data","text":"Her graph database continued to grow. For many concepts she was asked to store a code-set that described the valid values that data element could contain. She was building a reference data set. Here reference data started simply - a list of country codes, a list of state codes and a list of regions that included states. Then they asked her to list all the cities that they sold products. Soon she was tracking all the cities in the world and their long-lat coordinates. But this was OK, because the graph database that Tracy selected scaled well as the data complexity and size grew.","title":"Stage 4: Reference Data"},{"location":"intro/stories/#state-5-the-project-knowledge-graph","text":"The company like the fact that when Tracy was asked to add a new feature it was always done quickly. The data model scaled well and Tracy was not forced to rewrite queries as the data grew. As the request for more data continued Tracy added detailed product information and the customers that used these products. She then got regular updates of customer lists and their customer satisfaction surveys. Now multiple departments wanted access to Tracy's database. She became an enterprise resource.","title":"State 5: The Project Knowledge Graph"},{"location":"intro/stories/#state-6-the-enterprise-knowledge-graph","text":"Now that Tracy had more and more customer data and their purchase history, Tracy had to use multiple servers to manage the data. The company also needed to access customer records 24X7 so she put in tools to automatically replicate data and automatically migrated data to new servers as they were added to the cluster. Tracy had built an truly highly available enterprise knowledge graph.","title":"State 6: The Enterprise Knowledge Graph"}]}