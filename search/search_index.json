{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Enterprise Knowledge Graph This book is about using scalable graph databases to store large-scale connected information for an entire enterprise. Table of Contents","title":"Home"},{"location":"#enterprise-knowledge-graph","text":"This book is about using scalable graph databases to store large-scale connected information for an entire enterprise. Table of Contents","title":"Enterprise Knowledge Graph"},{"location":"contact/","text":"Contact Please connect with me on LinkedIn: Dan McCreary https://www.linkedin.com/in/danmccreary/ You can find blog on medium: https://dmccreary.medium.com/","title":"Contact"},{"location":"contact/#contact","text":"Please connect with me on LinkedIn: Dan McCreary https://www.linkedin.com/in/danmccreary/ You can find blog on medium: https://dmccreary.medium.com/","title":"Contact"},{"location":"glossary/","text":"Enterprise Knowledge Graph Glossary of Terms ABox Types of assertions or statements in a knowledge graph that conform to specific terminologies (knows as TBox statements). The terms ABox and TBox are used to help determine if a statement is universal or related to a specific Subgraph of an Enterpriese Knowledge Graph . Within our Enterprise Knowledge Graph architecture, ABox statements often contain knowledge about specific customers, parts, or concepts and may have specific Access Control rules. TBox statements don't usually have these same access rules. See also: TBox Wikipedia page on ABox Accumulator A type of variable that tracks items as you traverse through a graph. Accumulators can be global or be attached to a specific vertex. Accumulators allow MapReduce style queries where each server node in a cluster does work in its local data and returns consolidated results to the query node. For example, in the query \"count all customers that have returned clothing items\" , each node would return only a single count to the query node. This type of query reduces the amount of communication between nodes in the graph cluster. A Priori and A Posteriori A priori knowledge is that which is independent of experience. A posteriori knowledge is that which depends on empirical evidence. The rules of mathematics, logic, and business rules are usually classified as a priori read-access is usually shared across all users of an enterprise knowledge graph. Knowledge about a specific observable event, observation, customer transaction, etc. are considered A Posteriori and may not need to be universally accessed. In an enterprise knowledge graph, a priori knowledge tends to be more universal such as TBox assertions that are universally accessible by all subgraphs . https://en.wikipedia.org/wiki/A_priori_and_a_posteriori Automaic Sharding The process of automatically migrating data from one server to another server in a distributed database. Auto-sharding is frequently done as a database cluster grows or shrinks based on new data being added or removed from the cluster. Auto-sharding is one of the key features that differentiate scale-out enterprise-class databases from departmental solutions. Testing sharding at scale under continuous load in the face of possible hardware failure is one of the key challenges facing enterprise data architects. Bitermporal Modeling A specific case of Temporal Modeling modeling designed to handle historical data in two different timelines. One timeline is concerned with when an event occurred in the real world and the other timeline is concerned when the data was recorded or corrected in a computer system. This makes it possible to rewind the information to \"as it actually was\" in combination with \"as it was recorded\" at some point in time. In order to implement this feature within an Enterprise Knowledge Graph, the data model must accommodate updates while preserving historical information. Information cannot be overwritten or discarded even if it is erroneous. The consequence is more data must be retained even through only a small percentage of queries might require historical views of data. Bitemporal models are more complex to query and require additional RAM and disk storage. Wikipedia Bitemporal Modeling Brain Anologies Explaining enterprise knowledge graphs in terms of the human brain. Human brains have roughly 82 billion neurons and a degree of 10,000. Many enterprise knowledge graphs for the largest companies exceed 80 billion vertices but have only a handful of connections between them Degree . Business Event A change in the state of a business entity within an operational source system that may be published to a downstream consumer such as an enterprise knowledge graph. Business events are usually transmitted by Change Data Capture software and sent via document messages in formats such as JSON or XML. Wikipedia Business Vocabulary A collection of terms and phrases that have meaning to a specific domain of work. A business vocabulary typically starts out with a flat list of terms in a spreadsheet. The terms are listed with their abbreviations and definitions and how they are used within a specific project or department. As vocabularies grow and mature the individual terms might be grouped together. These groupings become taxonomies and can then be used to automatically classify documents with metadata tags of their preferred labels. Classified documents can have a dramatic increase on the search quality of a search engine. Change Data Capture Software that detects changes in a database and transmits the change information via business events to a remote system. These events are often published on stream processing systems using the publish/subscribe integration pattern. Also known as: CDC Wikipedia page on Change Data Capture Cognitive Bias A systematic pattern of deviation from norm or rationality in judgment. In this book we study why humans don't adopt enterprise knowledge graph technolgy and how we can use stories, demonstrations and economic reasoning to overcome these bias. In this book we study several types of cognitive bias including: Anchoring Availability bias Bandwagon effect Confirmation bias Filter bubble Framing effect Narrative bias Sunk cost Wikipedia on Congnitive Bias Concept An idea, notion or a unit of thought. Concept elements are the fundamental unit of work in semantics and are in integral part of enterprise knowledge graphs. In practice, each concept is usually associated with a vertex in a graph and has one preferred label in each language such as English. Concepts may have many alternate labels. Concepts are grouped in Schemas and may be part of one or more Collections. Concept Reference on W3C SKOS Site Concept Graph A graph that stores the core business concepts of a project, department or enterprise. In the ideal world, an enterprise graph will use a combination of machine learning to connect related concepts together. Cost Sharing The ability of a single graph data model to be shared by many business units and thus the costs can also be shared. Lower charge backs make graph databases more cost-effective than other data models. See also: No Complexity Penalty Data Ingestion A process by which data is moved from one or more sources to a destination where it can be stored and further analyzed. The data might be in different formats and come from various sources, including RDBMS, other types of databases, S3 buckets, CSVs, or from streams. Decision Tree A way of storing business rules in a graph. A decision tree contains a series of branches, each branch containing a conditional expression. If the conditional expression returns TRUE, then a true link is traversed. If the conditional returns FALSE and false branch is traversed. Decision trees and the corresponding rules that are represented as pointer hops in an enterprise knowledge graph have many integration and performance benefits. Degree The degree of a vertex is the count of the number of connections between the vertex and other vertices. The average degree of a graph is the average number of connections for a vertex. For non-directional graphs, counting is one per edge. For directional graphs that have reverse edges, each connection counts as two connections. In a directional graph, each vertex has both an in-degree and out-degree. Departmental Graph A graph designed to store information from one or more departments of an enterprise. Departmental graphs may be limited in that they can't be scaled up to hold enterprise data. Data Layer Raw low-level binary codes that contains information after analysis. Dashboard A set of views, usually presented on a single page, that display information as a set of key performance indicators and charts. In general, dashboard views can be customized for a role or a specific user. Document Store A type of database that stores data as tree-structured data elements such as JSON or XML. Document stores use path-like query languages such as X-PATH to traverse the tree structure. Languages such as XQuery provide high-quality functional programming languages with strong type checking. X-PATH is a mature W3C standard for expressing path traversal using a rich array of standardized wildcard expressions. DB Engines A web site that harvests web documents that discuss databases and classifies the documents based on a taxonomy of database types. The \"Popularity changes per category report\" is frequently cited in many graph presentations. DB Engines Embedding A data structure, usually a vector of decimal numbers, associated with an item in a graph, that helps users quickly find similar items. Vertices, Edges, and Paths may all have embeddings. Endogenic Knowledge The knowledge that is modeled within your existing enterprise knowledge graph. Finding out if your current endogenic knowledge can promote adequate recommendations and predictions is a key strategy in enterprise graph evolution. In contrast, Exogenous Knowledge is the knowledge that is not modeled inside your current knowledge graph. Wikipedia page on Endogeneity Emergence When an entity is observed to have properties its parts do not have on their own, properties or behaviors which emerge only when the parts interact in a wider whole. Emergence is a primary reason to build enterprise knowledge graphs. Emergence allows us to find new insights in data that we could not find without connected data. Unfortunately, there are few ways to predict the rate and value of insights that emerge when we connect new knowledge into an enterprise knowledge graph. The value of emergence can be difficult to predict without a team that has experience with similar prior projects. Wikipedia Page on https://en.wikipedia.org/wiki/Emergence Employee Graph A graph representation of all your organization employees and their activities. For each employee, the graph may contain items such as reporting structure, job titles, roles, work history, education, training, certifications, current skills, security access groups, goals, projects, tasks assigned, helpdesk tickets, bugs assigned, bugs fixed, inventions, desktop hardware, software being used, software licenses, emails, meetings, salary and performance reviews. A detailed employee graph can be used to match available staff with new projects and find similar employees for career mentoring. Employee graphs can also be used to predict the impact of employees that leave an organization, what employees work as ambassadors between groups, and what teams will be the most productive. Due to confidentially reasons, sensitive employee data is often stored in a subgraph with specific [access controls]. Also know as: Human Resources Graph Also know as: Human Capital Graph Enterprise Knowledge Graph A scalable graph database system used to store large-scale connected information for an entire enterprise. By scalable we mean that it must be able to run on multiple servers as the graph expands. Without scalability the graph might be considered a project or departmental graph. For many large organizations, enterprise knowledge graphs typically have hundreds of developers doing concurrent loading and query development and the models can be dynamic. For example the Google Knowledge Graph team is thought to contain over 1,500 developers. Entity Resolution The process of finding records in a data set that refer to the same entity across different data sources. Entity Resolution is a core technique in converting Information layer data into a consistent knowledge graph. Wikipeia Record Linkage Exogenous Knowledge Knowledge \u201ccoming from outside\u201d of your Enterprise Knowledge Graph. Finding out what exogenous knowledge you need to make accurate predictions is an emerging area of enterprise knowledge graphs. In economic modeling, exogenous events means an influence that arises from outside the scope of your model and that is, therefore, neither predicted nor explained by the model. In contrast, Endogenic Knowledge is the knowledge that is modeled within your enterprise knowledge graph. Wikipedia page on Exogeny Force Directed Graph A graph layout algorithm that simulates forces on springs that move items Wikipedia Force Directed Graph Drawing Glossary A business vocabulary associated with a topic. A glossary often has both general definitions of terms as well as contextual definitions for a specific domain or project. See also: Business Vocabulary GraphQL A query language for APIs and a runtime for fulfilling those queries with your existing data. Ironically, GraphGL has nothing to do with graph databases other than the fact that the queries often run much faster on graphs. The name \"graph\" was used internally at FaceBook since they store their data in a graph structure. One concern about GraphQL at the enterprise-scale is that your graph database should be able to detect GraphQL queries that are using too many resources. This means your enterprise graph databases must understand concepts of resource quotas . Graph Query Language A proposed standard graph query language being developed by the Working Group 3 (Database Languages) of ISO/IEC JTC 1's Subcommittee 32. GQL is designed to work with Labeled Property Graphs . Wikipedia GQL Page Graph Structured Query Language A distributed graph query language developed by TigerGraph. GSQL was designed to be syntactically similar to the SQL language but it also integrated distributed query concepts that share patterns similar to MapReduce queries. Also known as: GSQL Graph Database A way of storing information in terms of vertices and edges. Graph databases consider edge traversal as a primary performance consideration. By storing edges as in-memory pointers graph databases offer roughly a 1,000x performance improvement over relational database management JOIN operations that must be calculated for each query. See also: Index Free Adjacency Graph Isomorphism A graph can exist in different forms having the same number of vertices, edges, and also the same edge connectivity. Such graphs are called isomorphic graphs. Hedgehog vs Fox Modeling Focus on accurate modeling a single domain or subgraph of an enterprise knowledge graph (the Hedgehog) vs general modeling of a wide variety of subgraphs or domains. The term comes from Archilochus who stated \"a fox knows many things, but a hedgehog knows one important thing\". There are pros and cons for taking different approaches. No single strategy will work for all enterprise knowledge graphs at all times. The involvement of subject-matter experts (hedgehogs) at different times in the lifecycle of an enterprise knowledge graph will impact the evolution of enterprise knowledge graphs. Higher Order Knowledge A height-related metaphor that is used to describe more abstract knowledge that is more universal in an enterprise knowledge graph. The concept of \"height\" is related to the layers of the Knowledge Triange . For example, the idea behind \"higher-order thinking\" is that some types of learning requires more cognitive processing than others, but also have more generalized benefits. Within knowledge graphs this may not translate into more CPU time for query traversal, but may depend on having more abstract vertices and edges in an upper or mid-range ontology. Wikipedia page on Higher Order Thinking Index Free Adjacency Accessing related entities in a system without having to consult a centralized index. Using direct in-memory pointers to represent relationships is approximately three orders of magnitude faster than referencing a central index system. See also: The Neighborhood Walk Story Information Layer Data about our key business entities. This includes Things, like People, Places and Events. Key-Value Store A type of database that stores items as pairs of keys and values. The keys are strings and the values are binary blobs such as files or images. A simple put/get/delete interface is used to manage the database. Key-value stores are excellent complements to graph databases since their simplicity allows for low-cost-per-byte storage. Knowledge Layer A layer in the knowledge triangle that contains connected information. The knowledge layer is often the top layer in our views. There are some views that include a Wisdom layer on top of the knowledge layer. Knowledge Graph A set of interconnected typed entities and their attributes. Entities can be any business objects, customers, products, parts, documents, employees or concepts. Entities are usually implemented as vertices in a graph database and connected through edges. In some types of graphs, for example LPGs , edges also have attributes. Note that this definition has no dependence on semantics and inference. Our definition is intentionally designed to include many types of interconnected datasets. We think your organizational chart is a type of knowledge graph an may be a subgraph of your enterprise knowledge graph. Knowledge Represenation The process of representing information (individual facts) about the world in a form that a computer system can utilize to solve complex tasks. Within the context of the enterprise knowledge graph, we used graph databases as our primary way to store knowledge and we complement graph databases with search engines and key-value stores when they are more efficient. There is no single knowledge reprenstation that is ideal for all problems. Graph database are the preferred way to store knowledge because efficient reasoning can be implemented as fast pointer-hopping operations that can be optimized by specialized hardware. Knowledge representation is often the most complex challenge in the field of Artificial Intelligence. Wikipedia Page on Knowledge Represntaion Knowledge Triangle A stack of three layers. At the base is the Data Layer , above that the Information Layer and at the top the Knowledge Layer . Label A string associated with one or more Concepts . Labels have two main types: Preferred Labels and Alternate Labels . Most formal ontologies and taxonomies only permit a single preferred label for each Concept in a given Language. Labeled Property Graph A graph data model where each Vertex and Edge have a single type and goth Vertices and Edges have attributes. Both TigerGraph and Neo4j use the LPG data model. Also known as: LPG Load-As-Is Pattern A data loading pattern that loads the data into a graph with minimal transformation. Once the data is loaded into the graph the transformation is done in the native language of the graph such as GSQL. This pattern allows many projects to share the underlying data loaders and allows each team to customize the post-loading transformation using the native query language of the graph. The other major data model is the RDF model which is discouraged at Optum due to the challenges with Reification. Reification causes RDF SPARQL queries to be rewritten. Load-as-is pattern See also: RDF The Neighborhood Walk Story A story used to illustrate the difference between direct pointer hopping and using centralized indexes to traverse relationships. The story uses a 30-second walk between two houses vs. an 8.2-hour walk to a central location and back. No Complexity Penalty Unlike relational databases, graph databases quickly traverse many complex relationships. As a result, graph databases are better at modeling the real world - which is full of complexity. We use the phrase \"No Complexity Penalty\" every time we are training people who have come from the relational world that worry that too many relationships will slow down their queries due to slow JOINs. See also: One version of the truth One Version of the Truth The real world has many complex relationships. There are many ways to build simple models that take shortcuts to optimize queries by limiting relationships. This is important in relational database modeling. But the closer we get to modeling the real world, the closer to a single version of the truth we get. Models that fairly represent the complexities of the real world can be reused among many business units and thus the costs of holding the information in memory can be shared. This is why graph databases cost less then relational databases. On-the-Wire vs. In-the-Can A way of looking at knowledge representation requirements in two domains. On-The-Wire implies that serialization of a dataset must retain connection information within itself and to other external systems. In-The-Can knowledge representations are optimized for ease of query and sustainability . RDF is optimized for On-The-Wire exchange of knowledge. LPG is optimized for In-The-Can tasks such as ease of query and sustainability. Ontology A graph of Concepts within a specific domain. Ontologies often begin as flat term lists, that become taxonomies that then have more complex relationships than simple broader and narrower concepts. Ontologies are often stored in formats such as SKOS and OWL. Open vs Closed World https://en.wikipedia.org/wiki/Open-world_assumption https://en.wikipedia.org/wiki/Closed-world_assumption Operational Source System A transactional computer that is the source of a data stream. Enterprise Graph Databases often use Change Data Capture software on these systems to create an event stream of change records that so they can be stored in a central enterprise knowledge graph. Change records are new, updated, or deleted business entities. PageRank A graph algorithm that is used to rank the most influential vertices in a directed graph. For example web pages in a graph of linked web pages. PageRank was first used by Google Search to rank web pages in their search engine results. The patent for PageRank (now expired) was purchased by Google from Standford University for Google shares. Those shares sold for over $336 million USD when Google went public. Wikipedia Preferred Label A preferred lexical label associated with a Concept . In the SKOS standard, there should be one and only one preferred label per language per concept. Project Graph A graph that supports a specific project. Project graphs may contain knowledge that is not of interest to the rest of the enterprise. Reference Data Reference data is data used to classify or categorize other data. They typically are stored as a set of valid codes for a specific data element. For example the list of Country Codes is a type of reference data. Reference data is often stored as a short code and a definition of what that code represents. Reification Reification is the process by which an abstract idea about a computer program is turned into an explicit data model or other object created in a programming language. Specifically, in the RDF modeling process it is the process of adding an abstract vertex to a graph when properties are needed in a relationship. Reification causes queries that traverse that node to be rewritten. This means that SPARQL queries are inherently much more difficult to maintain than LPG graph queries. Resource Description Framework An early family of standards developed by the World Wide Web Consortium for exchanging graph data championed by the Semantic Web community starting in 1999. RDF gained some traction around 2010 but failed to gain widespread adoption due to the complexity of the standards and the problems of Reification . Wikipedia Resource Quota The ability to limit the resources consumed by a query such as CPU time, or RAM for individuals or groups. Large enterprise-scale graph databases must carefully monitor and constrain queries that consume too many resources. Many older technologies such as Apache Drill are difficult to implement without the ability to monitor and restrict resources. Role-based Access Control The ability to assign access to a resource to individuals that have a specific role. For Enterprise Knowledge Graphs, there are both high-level subgraph rules and fine-grain rules such as vertex-related role-based access control. Rules Engine A software component that executes rules according to some algorithm. In the Enterprise Knowledge Graph space rules are frequently represented in Decision Tree structures within the graph. [Rules for Knowledge Graph Rules])https://dmccreary.medium.com/rules-for-knowledge-graphs-rules-f22587307a8f Semantics The branch of computer science associated with meaning. It can be best understood by understanding the semantic triangle. The key point of the semantic triangle is that we cannot directly associate a label with a referent without traversing concepts. Semantic Graph A graph where each vertex represents a Concept and the edges of the graph represent the relationships between the Concepts. The primary data model for storing semantic graphs is the SKOS data model where Concepts and Labels are distinct types. Shapes Constraint Language A W3C standard RDF vocabulary for validating RDF graphs against a set of conditions. Unlike document validation standards like XML Schema, SHACL assumes that data quality checks should be able to look for relationships in a graph as well as the local context of a document. These conditions are provided as shapes and other constructs expressed in the form of an RDF graph. LPG graphs do not yet have a version of SHACL. Also known as: SHACL SHACL W3C Simple Knowledge Organizational System A model for expressing the basic structure and content of concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, folksonomies, and other similar types of controlled vocabularies. SKOS is also the name of the world-wide-web standard for encoding these systems. Serializations of SKOS are typically done in RDF format although other encodings such as XML and JSON are common. See Also: W3C SKOS Primer See Also: W2C SKOS Referecnce Strategy Graph A graph that is used to help determine what strategies might be optimal for an enterprise or a subgroup as well as how organizations are performing on a specific strategy. To be successful, enterprise and departmental strategies must be encoded in machine-readable forms such as StratML and loaded into an enterprise knowledge graph. Strategy graphs can also be used to determine the alignment of proposed projects for the future in an organization. StratML encoding is sometimes required of US federal organizations so that strategies can be analyzed by published public documents. Subgraph A subset of an enterprise knowledge graph that may store specific types of knowledge and may have specific access control rules based on the role of a user. For example, a business glossary, taxonomy, ontology or business rules system that contains no customer-specific information may be in one subgraph and have universal read-access for all users. Customer-specific data that is highly confidential may be stored in a different subgraph, with read access only granted on a need-to-know basis. See also: Role Based Access Control Sustainability The ability for a team of developers to maintain the code that supports an enterprise knowledge graph in the face of changes to the data model. The key measure is to avoid problems related to rewriting graph queries when small changes are made to the graph data model. See also: The Jenga Tower Story Systems Thinking A way of looking at problems in terms of components that interact with each other over time using direct connections, indirection connections and both positive and negative feedback cycles. Systems Thinking forces us to think broadly about how our enterprise knowledge graphs interact with external systems. Systems thinking also helps us see the unintended consequences of our actions. TBox A \"terminological component\" or terminology Concept associated with a set of facts assertions (ABox statements) of a knowledge graph. TBox statements tend to more rules or metarules (rules about rules) that individual fact about customers or other business entities. See also: ABox Wikipedia Tbox page Temporal Modeling The process of modeling time in a data model. Modeling time can be complex when the requirements of a system require you to be able to recreate detailed reports as they were at a prior point in time. Temporal modeling includes the concept of versioning and bitemporal modeling Triple Store A purpose-built database for the storage and retrieval of RDF triples through semantic queries. Triple stores are not used in most enterprise graphs due to their lack of sustanability due to problems with Reification . https://en.wikipedia.org/wiki/Triplestore Upper Ontology General high-level Concepts that are common across all domains in a knowledge graph. Concepts such as Organization, Customer, Family Unit, Product, Part, Invoice, Document are often consider part of an upper ontology. Enterprise graphs may contain multiple ontologies and the ease of linking ontologies in highly dependant on sharing upper ontologies. Wikipedia Page on Upper Ontology Web Ontology Language A Semantic Web language designed to represent rich and complex knowledge about things, groups of things, and relations between things. W3C OWL Web Site","title":"Glossary"},{"location":"glossary/#enterprise-knowledge-graph-glossary-of-terms","text":"","title":"Enterprise Knowledge Graph Glossary of Terms"},{"location":"glossary/#abox","text":"Types of assertions or statements in a knowledge graph that conform to specific terminologies (knows as TBox statements). The terms ABox and TBox are used to help determine if a statement is universal or related to a specific Subgraph of an Enterpriese Knowledge Graph . Within our Enterprise Knowledge Graph architecture, ABox statements often contain knowledge about specific customers, parts, or concepts and may have specific Access Control rules. TBox statements don't usually have these same access rules. See also: TBox Wikipedia page on ABox","title":"ABox"},{"location":"glossary/#accumulator","text":"A type of variable that tracks items as you traverse through a graph. Accumulators can be global or be attached to a specific vertex. Accumulators allow MapReduce style queries where each server node in a cluster does work in its local data and returns consolidated results to the query node. For example, in the query \"count all customers that have returned clothing items\" , each node would return only a single count to the query node. This type of query reduces the amount of communication between nodes in the graph cluster.","title":"Accumulator"},{"location":"glossary/#a-priori-and-a-posteriori","text":"A priori knowledge is that which is independent of experience. A posteriori knowledge is that which depends on empirical evidence. The rules of mathematics, logic, and business rules are usually classified as a priori read-access is usually shared across all users of an enterprise knowledge graph. Knowledge about a specific observable event, observation, customer transaction, etc. are considered A Posteriori and may not need to be universally accessed. In an enterprise knowledge graph, a priori knowledge tends to be more universal such as TBox assertions that are universally accessible by all subgraphs . https://en.wikipedia.org/wiki/A_priori_and_a_posteriori","title":"A Priori and A Posteriori"},{"location":"glossary/#automaic-sharding","text":"The process of automatically migrating data from one server to another server in a distributed database. Auto-sharding is frequently done as a database cluster grows or shrinks based on new data being added or removed from the cluster. Auto-sharding is one of the key features that differentiate scale-out enterprise-class databases from departmental solutions. Testing sharding at scale under continuous load in the face of possible hardware failure is one of the key challenges facing enterprise data architects.","title":"Automaic Sharding"},{"location":"glossary/#bitermporal-modeling","text":"A specific case of Temporal Modeling modeling designed to handle historical data in two different timelines. One timeline is concerned with when an event occurred in the real world and the other timeline is concerned when the data was recorded or corrected in a computer system. This makes it possible to rewind the information to \"as it actually was\" in combination with \"as it was recorded\" at some point in time. In order to implement this feature within an Enterprise Knowledge Graph, the data model must accommodate updates while preserving historical information. Information cannot be overwritten or discarded even if it is erroneous. The consequence is more data must be retained even through only a small percentage of queries might require historical views of data. Bitemporal models are more complex to query and require additional RAM and disk storage. Wikipedia Bitemporal Modeling","title":"Bitermporal Modeling"},{"location":"glossary/#brain-anologies","text":"Explaining enterprise knowledge graphs in terms of the human brain. Human brains have roughly 82 billion neurons and a degree of 10,000. Many enterprise knowledge graphs for the largest companies exceed 80 billion vertices but have only a handful of connections between them Degree .","title":"Brain Anologies"},{"location":"glossary/#business-event","text":"A change in the state of a business entity within an operational source system that may be published to a downstream consumer such as an enterprise knowledge graph. Business events are usually transmitted by Change Data Capture software and sent via document messages in formats such as JSON or XML. Wikipedia","title":"Business Event"},{"location":"glossary/#business-vocabulary","text":"A collection of terms and phrases that have meaning to a specific domain of work. A business vocabulary typically starts out with a flat list of terms in a spreadsheet. The terms are listed with their abbreviations and definitions and how they are used within a specific project or department. As vocabularies grow and mature the individual terms might be grouped together. These groupings become taxonomies and can then be used to automatically classify documents with metadata tags of their preferred labels. Classified documents can have a dramatic increase on the search quality of a search engine.","title":"Business Vocabulary"},{"location":"glossary/#change-data-capture","text":"Software that detects changes in a database and transmits the change information via business events to a remote system. These events are often published on stream processing systems using the publish/subscribe integration pattern. Also known as: CDC Wikipedia page on Change Data Capture","title":"Change Data Capture"},{"location":"glossary/#cognitive-bias","text":"A systematic pattern of deviation from norm or rationality in judgment. In this book we study why humans don't adopt enterprise knowledge graph technolgy and how we can use stories, demonstrations and economic reasoning to overcome these bias. In this book we study several types of cognitive bias including: Anchoring Availability bias Bandwagon effect Confirmation bias Filter bubble Framing effect Narrative bias Sunk cost Wikipedia on Congnitive Bias","title":"Cognitive Bias"},{"location":"glossary/#concept","text":"An idea, notion or a unit of thought. Concept elements are the fundamental unit of work in semantics and are in integral part of enterprise knowledge graphs. In practice, each concept is usually associated with a vertex in a graph and has one preferred label in each language such as English. Concepts may have many alternate labels. Concepts are grouped in Schemas and may be part of one or more Collections. Concept Reference on W3C SKOS Site","title":"Concept"},{"location":"glossary/#concept-graph","text":"A graph that stores the core business concepts of a project, department or enterprise. In the ideal world, an enterprise graph will use a combination of machine learning to connect related concepts together.","title":"Concept Graph"},{"location":"glossary/#cost-sharing","text":"The ability of a single graph data model to be shared by many business units and thus the costs can also be shared. Lower charge backs make graph databases more cost-effective than other data models. See also: No Complexity Penalty","title":"Cost Sharing"},{"location":"glossary/#data-ingestion","text":"A process by which data is moved from one or more sources to a destination where it can be stored and further analyzed. The data might be in different formats and come from various sources, including RDBMS, other types of databases, S3 buckets, CSVs, or from streams.","title":"Data Ingestion"},{"location":"glossary/#decision-tree","text":"A way of storing business rules in a graph. A decision tree contains a series of branches, each branch containing a conditional expression. If the conditional expression returns TRUE, then a true link is traversed. If the conditional returns FALSE and false branch is traversed. Decision trees and the corresponding rules that are represented as pointer hops in an enterprise knowledge graph have many integration and performance benefits.","title":"Decision Tree"},{"location":"glossary/#degree","text":"The degree of a vertex is the count of the number of connections between the vertex and other vertices. The average degree of a graph is the average number of connections for a vertex. For non-directional graphs, counting is one per edge. For directional graphs that have reverse edges, each connection counts as two connections. In a directional graph, each vertex has both an in-degree and out-degree.","title":"Degree"},{"location":"glossary/#departmental-graph","text":"A graph designed to store information from one or more departments of an enterprise. Departmental graphs may be limited in that they can't be scaled up to hold enterprise data.","title":"Departmental Graph"},{"location":"glossary/#data-layer","text":"Raw low-level binary codes that contains information after analysis.","title":"Data Layer"},{"location":"glossary/#dashboard","text":"A set of views, usually presented on a single page, that display information as a set of key performance indicators and charts. In general, dashboard views can be customized for a role or a specific user.","title":"Dashboard"},{"location":"glossary/#document-store","text":"A type of database that stores data as tree-structured data elements such as JSON or XML. Document stores use path-like query languages such as X-PATH to traverse the tree structure. Languages such as XQuery provide high-quality functional programming languages with strong type checking. X-PATH is a mature W3C standard for expressing path traversal using a rich array of standardized wildcard expressions.","title":"Document Store"},{"location":"glossary/#db-engines","text":"A web site that harvests web documents that discuss databases and classifies the documents based on a taxonomy of database types. The \"Popularity changes per category report\" is frequently cited in many graph presentations. DB Engines","title":"DB Engines"},{"location":"glossary/#embedding","text":"A data structure, usually a vector of decimal numbers, associated with an item in a graph, that helps users quickly find similar items. Vertices, Edges, and Paths may all have embeddings.","title":"Embedding"},{"location":"glossary/#endogenic-knowledge","text":"The knowledge that is modeled within your existing enterprise knowledge graph. Finding out if your current endogenic knowledge can promote adequate recommendations and predictions is a key strategy in enterprise graph evolution. In contrast, Exogenous Knowledge is the knowledge that is not modeled inside your current knowledge graph. Wikipedia page on Endogeneity","title":"Endogenic Knowledge"},{"location":"glossary/#emergence","text":"When an entity is observed to have properties its parts do not have on their own, properties or behaviors which emerge only when the parts interact in a wider whole. Emergence is a primary reason to build enterprise knowledge graphs. Emergence allows us to find new insights in data that we could not find without connected data. Unfortunately, there are few ways to predict the rate and value of insights that emerge when we connect new knowledge into an enterprise knowledge graph. The value of emergence can be difficult to predict without a team that has experience with similar prior projects. Wikipedia Page on https://en.wikipedia.org/wiki/Emergence","title":"Emergence"},{"location":"glossary/#employee-graph","text":"A graph representation of all your organization employees and their activities. For each employee, the graph may contain items such as reporting structure, job titles, roles, work history, education, training, certifications, current skills, security access groups, goals, projects, tasks assigned, helpdesk tickets, bugs assigned, bugs fixed, inventions, desktop hardware, software being used, software licenses, emails, meetings, salary and performance reviews. A detailed employee graph can be used to match available staff with new projects and find similar employees for career mentoring. Employee graphs can also be used to predict the impact of employees that leave an organization, what employees work as ambassadors between groups, and what teams will be the most productive. Due to confidentially reasons, sensitive employee data is often stored in a subgraph with specific [access controls]. Also know as: Human Resources Graph Also know as: Human Capital Graph","title":"Employee Graph"},{"location":"glossary/#enterprise-knowledge-graph","text":"A scalable graph database system used to store large-scale connected information for an entire enterprise. By scalable we mean that it must be able to run on multiple servers as the graph expands. Without scalability the graph might be considered a project or departmental graph. For many large organizations, enterprise knowledge graphs typically have hundreds of developers doing concurrent loading and query development and the models can be dynamic. For example the Google Knowledge Graph team is thought to contain over 1,500 developers.","title":"Enterprise Knowledge Graph"},{"location":"glossary/#entity-resolution","text":"The process of finding records in a data set that refer to the same entity across different data sources. Entity Resolution is a core technique in converting Information layer data into a consistent knowledge graph. Wikipeia Record Linkage","title":"Entity Resolution"},{"location":"glossary/#exogenous-knowledge","text":"Knowledge \u201ccoming from outside\u201d of your Enterprise Knowledge Graph. Finding out what exogenous knowledge you need to make accurate predictions is an emerging area of enterprise knowledge graphs. In economic modeling, exogenous events means an influence that arises from outside the scope of your model and that is, therefore, neither predicted nor explained by the model. In contrast, Endogenic Knowledge is the knowledge that is modeled within your enterprise knowledge graph. Wikipedia page on Exogeny","title":"Exogenous Knowledge"},{"location":"glossary/#force-directed-graph","text":"A graph layout algorithm that simulates forces on springs that move items Wikipedia Force Directed Graph Drawing","title":"Force Directed Graph"},{"location":"glossary/#glossary","text":"A business vocabulary associated with a topic. A glossary often has both general definitions of terms as well as contextual definitions for a specific domain or project. See also: Business Vocabulary","title":"Glossary"},{"location":"glossary/#graphql","text":"A query language for APIs and a runtime for fulfilling those queries with your existing data. Ironically, GraphGL has nothing to do with graph databases other than the fact that the queries often run much faster on graphs. The name \"graph\" was used internally at FaceBook since they store their data in a graph structure. One concern about GraphQL at the enterprise-scale is that your graph database should be able to detect GraphQL queries that are using too many resources. This means your enterprise graph databases must understand concepts of resource quotas .","title":"GraphQL"},{"location":"glossary/#graph-query-language","text":"A proposed standard graph query language being developed by the Working Group 3 (Database Languages) of ISO/IEC JTC 1's Subcommittee 32. GQL is designed to work with Labeled Property Graphs . Wikipedia GQL Page","title":"Graph Query Language"},{"location":"glossary/#graph-structured-query-language","text":"A distributed graph query language developed by TigerGraph. GSQL was designed to be syntactically similar to the SQL language but it also integrated distributed query concepts that share patterns similar to MapReduce queries. Also known as: GSQL","title":"Graph Structured Query Language"},{"location":"glossary/#graph-database","text":"A way of storing information in terms of vertices and edges. Graph databases consider edge traversal as a primary performance consideration. By storing edges as in-memory pointers graph databases offer roughly a 1,000x performance improvement over relational database management JOIN operations that must be calculated for each query. See also: Index Free Adjacency","title":"Graph Database"},{"location":"glossary/#graph-isomorphism","text":"A graph can exist in different forms having the same number of vertices, edges, and also the same edge connectivity. Such graphs are called isomorphic graphs.","title":"Graph Isomorphism"},{"location":"glossary/#hedgehog-vs-fox-modeling","text":"Focus on accurate modeling a single domain or subgraph of an enterprise knowledge graph (the Hedgehog) vs general modeling of a wide variety of subgraphs or domains. The term comes from Archilochus who stated \"a fox knows many things, but a hedgehog knows one important thing\". There are pros and cons for taking different approaches. No single strategy will work for all enterprise knowledge graphs at all times. The involvement of subject-matter experts (hedgehogs) at different times in the lifecycle of an enterprise knowledge graph will impact the evolution of enterprise knowledge graphs.","title":"Hedgehog vs Fox Modeling"},{"location":"glossary/#higher-order-knowledge","text":"A height-related metaphor that is used to describe more abstract knowledge that is more universal in an enterprise knowledge graph. The concept of \"height\" is related to the layers of the Knowledge Triange . For example, the idea behind \"higher-order thinking\" is that some types of learning requires more cognitive processing than others, but also have more generalized benefits. Within knowledge graphs this may not translate into more CPU time for query traversal, but may depend on having more abstract vertices and edges in an upper or mid-range ontology. Wikipedia page on Higher Order Thinking","title":"Higher Order Knowledge"},{"location":"glossary/#index-free-adjacency","text":"Accessing related entities in a system without having to consult a centralized index. Using direct in-memory pointers to represent relationships is approximately three orders of magnitude faster than referencing a central index system. See also: The Neighborhood Walk Story","title":"Index Free Adjacency"},{"location":"glossary/#information-layer","text":"Data about our key business entities. This includes Things, like People, Places and Events.","title":"Information Layer"},{"location":"glossary/#key-value-store","text":"A type of database that stores items as pairs of keys and values. The keys are strings and the values are binary blobs such as files or images. A simple put/get/delete interface is used to manage the database. Key-value stores are excellent complements to graph databases since their simplicity allows for low-cost-per-byte storage.","title":"Key-Value Store"},{"location":"glossary/#knowledge-layer","text":"A layer in the knowledge triangle that contains connected information. The knowledge layer is often the top layer in our views. There are some views that include a Wisdom layer on top of the knowledge layer.","title":"Knowledge Layer"},{"location":"glossary/#knowledge-graph","text":"A set of interconnected typed entities and their attributes. Entities can be any business objects, customers, products, parts, documents, employees or concepts. Entities are usually implemented as vertices in a graph database and connected through edges. In some types of graphs, for example LPGs , edges also have attributes. Note that this definition has no dependence on semantics and inference. Our definition is intentionally designed to include many types of interconnected datasets. We think your organizational chart is a type of knowledge graph an may be a subgraph of your enterprise knowledge graph.","title":"Knowledge Graph"},{"location":"glossary/#knowledge-represenation","text":"The process of representing information (individual facts) about the world in a form that a computer system can utilize to solve complex tasks. Within the context of the enterprise knowledge graph, we used graph databases as our primary way to store knowledge and we complement graph databases with search engines and key-value stores when they are more efficient. There is no single knowledge reprenstation that is ideal for all problems. Graph database are the preferred way to store knowledge because efficient reasoning can be implemented as fast pointer-hopping operations that can be optimized by specialized hardware. Knowledge representation is often the most complex challenge in the field of Artificial Intelligence. Wikipedia Page on Knowledge Represntaion","title":"Knowledge Represenation"},{"location":"glossary/#knowledge-triangle","text":"A stack of three layers. At the base is the Data Layer , above that the Information Layer and at the top the Knowledge Layer .","title":"Knowledge Triangle"},{"location":"glossary/#label","text":"A string associated with one or more Concepts . Labels have two main types: Preferred Labels and Alternate Labels . Most formal ontologies and taxonomies only permit a single preferred label for each Concept in a given Language.","title":"Label"},{"location":"glossary/#labeled-property-graph","text":"A graph data model where each Vertex and Edge have a single type and goth Vertices and Edges have attributes. Both TigerGraph and Neo4j use the LPG data model. Also known as: LPG","title":"Labeled Property Graph"},{"location":"glossary/#load-as-is-pattern","text":"A data loading pattern that loads the data into a graph with minimal transformation. Once the data is loaded into the graph the transformation is done in the native language of the graph such as GSQL. This pattern allows many projects to share the underlying data loaders and allows each team to customize the post-loading transformation using the native query language of the graph. The other major data model is the RDF model which is discouraged at Optum due to the challenges with Reification. Reification causes RDF SPARQL queries to be rewritten. Load-as-is pattern See also: RDF","title":"Load-As-Is Pattern"},{"location":"glossary/#the-neighborhood-walk-story","text":"A story used to illustrate the difference between direct pointer hopping and using centralized indexes to traverse relationships. The story uses a 30-second walk between two houses vs. an 8.2-hour walk to a central location and back.","title":"The Neighborhood Walk Story"},{"location":"glossary/#no-complexity-penalty","text":"Unlike relational databases, graph databases quickly traverse many complex relationships. As a result, graph databases are better at modeling the real world - which is full of complexity. We use the phrase \"No Complexity Penalty\" every time we are training people who have come from the relational world that worry that too many relationships will slow down their queries due to slow JOINs. See also: One version of the truth","title":"No Complexity Penalty"},{"location":"glossary/#one-version-of-the-truth","text":"The real world has many complex relationships. There are many ways to build simple models that take shortcuts to optimize queries by limiting relationships. This is important in relational database modeling. But the closer we get to modeling the real world, the closer to a single version of the truth we get. Models that fairly represent the complexities of the real world can be reused among many business units and thus the costs of holding the information in memory can be shared. This is why graph databases cost less then relational databases.","title":"One Version of the Truth"},{"location":"glossary/#on-the-wire-vs-in-the-can","text":"A way of looking at knowledge representation requirements in two domains. On-The-Wire implies that serialization of a dataset must retain connection information within itself and to other external systems. In-The-Can knowledge representations are optimized for ease of query and sustainability . RDF is optimized for On-The-Wire exchange of knowledge. LPG is optimized for In-The-Can tasks such as ease of query and sustainability.","title":"On-the-Wire vs. In-the-Can"},{"location":"glossary/#ontology","text":"A graph of Concepts within a specific domain. Ontologies often begin as flat term lists, that become taxonomies that then have more complex relationships than simple broader and narrower concepts. Ontologies are often stored in formats such as SKOS and OWL.","title":"Ontology"},{"location":"glossary/#open-vs-closed-world","text":"https://en.wikipedia.org/wiki/Open-world_assumption https://en.wikipedia.org/wiki/Closed-world_assumption","title":"Open vs Closed World"},{"location":"glossary/#operational-source-system","text":"A transactional computer that is the source of a data stream. Enterprise Graph Databases often use Change Data Capture software on these systems to create an event stream of change records that so they can be stored in a central enterprise knowledge graph. Change records are new, updated, or deleted business entities.","title":"Operational Source System"},{"location":"glossary/#pagerank","text":"A graph algorithm that is used to rank the most influential vertices in a directed graph. For example web pages in a graph of linked web pages. PageRank was first used by Google Search to rank web pages in their search engine results. The patent for PageRank (now expired) was purchased by Google from Standford University for Google shares. Those shares sold for over $336 million USD when Google went public. Wikipedia","title":"PageRank"},{"location":"glossary/#preferred-label","text":"A preferred lexical label associated with a Concept . In the SKOS standard, there should be one and only one preferred label per language per concept.","title":"Preferred Label"},{"location":"glossary/#project-graph","text":"A graph that supports a specific project. Project graphs may contain knowledge that is not of interest to the rest of the enterprise.","title":"Project Graph"},{"location":"glossary/#reference-data","text":"Reference data is data used to classify or categorize other data. They typically are stored as a set of valid codes for a specific data element. For example the list of Country Codes is a type of reference data. Reference data is often stored as a short code and a definition of what that code represents.","title":"Reference Data"},{"location":"glossary/#reification","text":"Reification is the process by which an abstract idea about a computer program is turned into an explicit data model or other object created in a programming language. Specifically, in the RDF modeling process it is the process of adding an abstract vertex to a graph when properties are needed in a relationship. Reification causes queries that traverse that node to be rewritten. This means that SPARQL queries are inherently much more difficult to maintain than LPG graph queries.","title":"Reification"},{"location":"glossary/#resource-description-framework","text":"An early family of standards developed by the World Wide Web Consortium for exchanging graph data championed by the Semantic Web community starting in 1999. RDF gained some traction around 2010 but failed to gain widespread adoption due to the complexity of the standards and the problems of Reification . Wikipedia","title":"Resource Description Framework"},{"location":"glossary/#resource-quota","text":"The ability to limit the resources consumed by a query such as CPU time, or RAM for individuals or groups. Large enterprise-scale graph databases must carefully monitor and constrain queries that consume too many resources. Many older technologies such as Apache Drill are difficult to implement without the ability to monitor and restrict resources.","title":"Resource Quota"},{"location":"glossary/#role-based-access-control","text":"The ability to assign access to a resource to individuals that have a specific role. For Enterprise Knowledge Graphs, there are both high-level subgraph rules and fine-grain rules such as vertex-related role-based access control.","title":"Role-based Access Control"},{"location":"glossary/#rules-engine","text":"A software component that executes rules according to some algorithm. In the Enterprise Knowledge Graph space rules are frequently represented in Decision Tree structures within the graph. [Rules for Knowledge Graph Rules])https://dmccreary.medium.com/rules-for-knowledge-graphs-rules-f22587307a8f","title":"Rules Engine"},{"location":"glossary/#semantics","text":"The branch of computer science associated with meaning. It can be best understood by understanding the semantic triangle. The key point of the semantic triangle is that we cannot directly associate a label with a referent without traversing concepts.","title":"Semantics"},{"location":"glossary/#semantic-graph","text":"A graph where each vertex represents a Concept and the edges of the graph represent the relationships between the Concepts. The primary data model for storing semantic graphs is the SKOS data model where Concepts and Labels are distinct types.","title":"Semantic Graph"},{"location":"glossary/#shapes-constraint-language","text":"A W3C standard RDF vocabulary for validating RDF graphs against a set of conditions. Unlike document validation standards like XML Schema, SHACL assumes that data quality checks should be able to look for relationships in a graph as well as the local context of a document. These conditions are provided as shapes and other constructs expressed in the form of an RDF graph. LPG graphs do not yet have a version of SHACL. Also known as: SHACL SHACL W3C","title":"Shapes Constraint Language"},{"location":"glossary/#simple-knowledge-organizational-system","text":"A model for expressing the basic structure and content of concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, folksonomies, and other similar types of controlled vocabularies. SKOS is also the name of the world-wide-web standard for encoding these systems. Serializations of SKOS are typically done in RDF format although other encodings such as XML and JSON are common. See Also: W3C SKOS Primer See Also: W2C SKOS Referecnce","title":"Simple Knowledge Organizational System"},{"location":"glossary/#strategy-graph","text":"A graph that is used to help determine what strategies might be optimal for an enterprise or a subgroup as well as how organizations are performing on a specific strategy. To be successful, enterprise and departmental strategies must be encoded in machine-readable forms such as StratML and loaded into an enterprise knowledge graph. Strategy graphs can also be used to determine the alignment of proposed projects for the future in an organization. StratML encoding is sometimes required of US federal organizations so that strategies can be analyzed by published public documents.","title":"Strategy Graph"},{"location":"glossary/#subgraph","text":"A subset of an enterprise knowledge graph that may store specific types of knowledge and may have specific access control rules based on the role of a user. For example, a business glossary, taxonomy, ontology or business rules system that contains no customer-specific information may be in one subgraph and have universal read-access for all users. Customer-specific data that is highly confidential may be stored in a different subgraph, with read access only granted on a need-to-know basis. See also: Role Based Access Control","title":"Subgraph"},{"location":"glossary/#sustainability","text":"The ability for a team of developers to maintain the code that supports an enterprise knowledge graph in the face of changes to the data model. The key measure is to avoid problems related to rewriting graph queries when small changes are made to the graph data model. See also: The Jenga Tower Story","title":"Sustainability"},{"location":"glossary/#systems-thinking","text":"A way of looking at problems in terms of components that interact with each other over time using direct connections, indirection connections and both positive and negative feedback cycles. Systems Thinking forces us to think broadly about how our enterprise knowledge graphs interact with external systems. Systems thinking also helps us see the unintended consequences of our actions.","title":"Systems Thinking"},{"location":"glossary/#tbox","text":"A \"terminological component\" or terminology Concept associated with a set of facts assertions (ABox statements) of a knowledge graph. TBox statements tend to more rules or metarules (rules about rules) that individual fact about customers or other business entities. See also: ABox Wikipedia Tbox page","title":"TBox"},{"location":"glossary/#temporal-modeling","text":"The process of modeling time in a data model. Modeling time can be complex when the requirements of a system require you to be able to recreate detailed reports as they were at a prior point in time. Temporal modeling includes the concept of versioning and bitemporal modeling","title":"Temporal Modeling"},{"location":"glossary/#triple-store","text":"A purpose-built database for the storage and retrieval of RDF triples through semantic queries. Triple stores are not used in most enterprise graphs due to their lack of sustanability due to problems with Reification . https://en.wikipedia.org/wiki/Triplestore","title":"Triple Store"},{"location":"glossary/#upper-ontology","text":"General high-level Concepts that are common across all domains in a knowledge graph. Concepts such as Organization, Customer, Family Unit, Product, Part, Invoice, Document are often consider part of an upper ontology. Enterprise graphs may contain multiple ontologies and the ease of linking ontologies in highly dependant on sharing upper ontologies. Wikipedia Page on Upper Ontology","title":"Upper Ontology"},{"location":"glossary/#web-ontology-language","text":"A Semantic Web language designed to represent rich and complex knowledge about things, groups of things, and relations between things. W3C OWL Web Site","title":"Web Ontology Language"},{"location":"table-of-contents/","text":"Enterprise Knowledge Graphs Table of Contents Part 1: Introduction Preface Acknowledgements Introduction to Enterprise Knowledge Graphs TBD Part 2: Enterprise Knowledge Graphs Concepts The Knowledge Triangle TBD Scale-Out Graph Databases - TBD Graph Machine Learning - TBD Calculating the Cost and Benefits of Enterprise Knowledge Graphs - TBD Part 3: Enterprise Knowledge Graphs Case Studies Customer 360 Analytics Dashboard Semantic Search Product Recommendation Employee Career Paths Strategy Analytics Part 4: Promoting Enterprise Knowledge Graphs Storytelling Glossary","title":"Table of Contents"},{"location":"table-of-contents/#enterprise-knowledge-graphs-table-of-contents","text":"","title":"Enterprise Knowledge Graphs Table of Contents"},{"location":"table-of-contents/#part-1-introduction","text":"Preface Acknowledgements Introduction to Enterprise Knowledge Graphs TBD","title":"Part 1: Introduction"},{"location":"table-of-contents/#part-2-enterprise-knowledge-graphs-concepts","text":"The Knowledge Triangle TBD Scale-Out Graph Databases - TBD Graph Machine Learning - TBD Calculating the Cost and Benefits of Enterprise Knowledge Graphs - TBD","title":"Part 2: Enterprise Knowledge Graphs Concepts"},{"location":"table-of-contents/#part-3-enterprise-knowledge-graphs-case-studies","text":"Customer 360 Analytics Dashboard Semantic Search Product Recommendation Employee Career Paths Strategy Analytics","title":"Part 3: Enterprise Knowledge Graphs Case Studies"},{"location":"table-of-contents/#part-4-promoting-enterprise-knowledge-graphs","text":"Storytelling Glossary","title":"Part 4: Promoting Enterprise Knowledge Graphs"},{"location":"case-studies/analytics-dashboard/","text":"","title":"Analytics dashboard"},{"location":"case-studies/customer-360/","text":"","title":"Customer 360"},{"location":"case-studies/rules-engine/","text":"","title":"Rules engine"},{"location":"case-studies/semantic-search/","text":"","title":"Semantic search"},{"location":"concepts/cost-benefit-analysis/","text":"","title":"Cost benefit analysis"},{"location":"concepts/entity-resolution/","text":"","title":"Entity resolution"},{"location":"concepts/graph-algorithms/","text":"","title":"Graph algorithms"},{"location":"concepts/graph-machine-learning/","text":"","title":"Graph machine learning"},{"location":"concepts/knowledge-triangle/","text":"","title":"Knowledge triangle"},{"location":"concepts/scale-out/","text":"Scale-Out Graph Databases Distributing Query Loads Autosharding Partitioning High Availability Fault Tolerance Rolling Upgrades","title":"Scale-Out Graph Databases"},{"location":"concepts/scale-out/#scale-out-graph-databases","text":"","title":"Scale-Out Graph Databases"},{"location":"concepts/scale-out/#distributing-query-loads","text":"","title":"Distributing Query Loads"},{"location":"concepts/scale-out/#autosharding","text":"","title":"Autosharding"},{"location":"concepts/scale-out/#partitioning","text":"","title":"Partitioning"},{"location":"concepts/scale-out/#high-availability","text":"","title":"High Availability"},{"location":"concepts/scale-out/#fault-tolerance","text":"","title":"Fault Tolerance"},{"location":"concepts/scale-out/#rolling-upgrades","text":"","title":"Rolling Upgrades"},{"location":"intro/","text":"Introduction to Enterprise Knowledge Graphs Preface Preface","title":"Introduction to Enterprise Knowledge Graphs"},{"location":"intro/#introduction-to-enterprise-knowledge-graphs","text":"","title":"Introduction to Enterprise Knowledge Graphs"},{"location":"intro/#preface","text":"Preface","title":"Preface"},{"location":"intro/acknowledgements/","text":"Enterprise Knowledge Graph Acknowledgements I would like to thank the following people: Arun Batchu Nikhil Deshpande Parker Erickson Hank Head Jonathan Herke Mark Megerian John Santelli Sujith Sasidharan Ed Sverdlin Sudeep Vishnumurthy I want to express my gratitude to everyone within the Optum Advanced Technology Collaborative for helping me refine our storytelling strategies to our business areas. Many other people have guided me in my journey in becoming a better storytelling driven solution architect. They have taught me that is critical for us to understand both how technologies work, and to be able to relate the benefits with stories that our stakeholders will remember.","title":"Enterprise Knowledge Graph Acknowledgements"},{"location":"intro/acknowledgements/#enterprise-knowledge-graph-acknowledgements","text":"I would like to thank the following people: Arun Batchu Nikhil Deshpande Parker Erickson Hank Head Jonathan Herke Mark Megerian John Santelli Sujith Sasidharan Ed Sverdlin Sudeep Vishnumurthy I want to express my gratitude to everyone within the Optum Advanced Technology Collaborative for helping me refine our storytelling strategies to our business areas. Many other people have guided me in my journey in becoming a better storytelling driven solution architect. They have taught me that is critical for us to understand both how technologies work, and to be able to relate the benefits with stories that our stakeholders will remember.","title":"Enterprise Knowledge Graph Acknowledgements"},{"location":"intro/graph-database-adoption-trends/","text":"Graph Database Adoption Trends","title":"Graph Database Adoption Trends"},{"location":"intro/graph-database-adoption-trends/#graph-database-adoption-trends","text":"","title":"Graph Database Adoption Trends"},{"location":"intro/introduction/","text":"","title":"Introduction"},{"location":"intro/preface/","text":"Preface This book is my personal attempt to help people understand one of the most important developments in information technology: the rise of the Enterprise Knowledge Graph. I have spent most of my career helping organizations understand the strategic impact of various technologies. In 2011, working with Tony Shaw at Dataversity, we created one of the first international conferences in matching business problems to the emerging market of NoSQL databases. In 2014, working with my wife, Ann Kelly, we published our book \"Making Sense of NoSQL\" which became one of the highest-rated books on the topic of NoSQL databases. Our NoSQL book was the first to propose a taxonomy of database architectures that are used to guide the solution matching process. Graph databases were one of the six solutions we found that provided a unique set of value propositions. However, at the time, graph databases didn't scale well to meet the demanding requirements of the enterprise. The introduction of TigerGraph in 2017 started to change everything. Now we had a graph database that truly could scale to meet the demanding needs of the enterprise. After reading this book you will see that the Enterprise Knowledge Graph provides not just a strong return on investments today, but it will become the foundation that companies will build their organization's \"knowledge brains\" in the future. Imagine opening a chatbot that knows everything about your company. All the customers, all the products, all the production flows, all the employees, all the training programs, all the documents, all the systems, all the key concepts, and all the trends. The Enterprise Knowledge Graph is enabling all of these things today.","title":"Preface"},{"location":"intro/preface/#preface","text":"This book is my personal attempt to help people understand one of the most important developments in information technology: the rise of the Enterprise Knowledge Graph. I have spent most of my career helping organizations understand the strategic impact of various technologies. In 2011, working with Tony Shaw at Dataversity, we created one of the first international conferences in matching business problems to the emerging market of NoSQL databases. In 2014, working with my wife, Ann Kelly, we published our book \"Making Sense of NoSQL\" which became one of the highest-rated books on the topic of NoSQL databases. Our NoSQL book was the first to propose a taxonomy of database architectures that are used to guide the solution matching process. Graph databases were one of the six solutions we found that provided a unique set of value propositions. However, at the time, graph databases didn't scale well to meet the demanding requirements of the enterprise. The introduction of TigerGraph in 2017 started to change everything. Now we had a graph database that truly could scale to meet the demanding needs of the enterprise. After reading this book you will see that the Enterprise Knowledge Graph provides not just a strong return on investments today, but it will become the foundation that companies will build their organization's \"knowledge brains\" in the future. Imagine opening a chatbot that knows everything about your company. All the customers, all the products, all the production flows, all the employees, all the training programs, all the documents, all the systems, all the key concepts, and all the trends. The Enterprise Knowledge Graph is enabling all of these things today.","title":"Preface"},{"location":"intro/stories/","text":"Enterprise Knowledge Graph Stories The Google Knowledge Graph On May 16, 2012, Google published the \"Things Not Strings\" blog post. Now the world knew that graphs were no longer an academic interest. Google's graph serviced millions of requests per minute and was available 24X7. Knowlege Graphs became cool. Introducing the Knowledge Graph: things, not strings Glossary to Taxonomy to Ontology to Graph Tracy had a background in library science. She was asked to help a manufacturing company organize their datasets. Stage 1: The Glossary On Tracy's first day on the job, she heard dozens of terms she had never heard before. Many of them were acronyms of internal systems and projects. She started buy writing down the terms that she didn't understand in the first column of a spreadsheet. She put the definitions of the term in the second column. She was building a business glossary. Stage 2: The Taxonomy After a while, Tracy saw some recurring patterns in her terms. Some were computer application names, some were product names and some were \"other\". She started grouping the related terms together and added another column for the category of each term. She had a concept taxonomy. Stage 3: The Ontology After a while, Tracy's categories started to grow and become more complex. Categories had sub-categories and now she started to see relationships between terms. Terms had broader terms and narrower terms. Some teams used different names (or labels) for the same concept. Tracy now had a graph of concepts. She had an ontology. Tracy could no longer maintain the system using a simple spreadsheet. She worked with her peers to create a web front end to a graph database so it was easy for anyone to add and update concepts. Stage 4: Reference Data Her graph database continued to grow. For many concepts she was asked to store a code-set that described the valid values that data element could contain. She was building a reference data set. Here reference data started simply - a list of country codes, a list of state codes and a list of regions that included states. Then they asked her to list all the cities that they sold products. Soon she was tracking all the cities in the world and their long-lat coordinates. But this was OK, because the graph database that Tracy selected scaled well as the data complexity and size grew. State 5: The Project Knowledge Graph The company like the fact that when Tracy was asked to add a new feature it was always done quickly. The data model scaled well and Tracy was not forced to rewrite queries as the data grew. As the request for more data continued Tracy added detailed product information and the customers that used these products. She then got regular updates of customer lists and their customer satisfaction surveys. Now multiple departments wanted access to Tracy's database. She became an enterprise resource. State 6: The Enterprise Knowledge Graph Now that Tracy had more and more customer data and their purchase history, Tracy had to use multiple servers to manage the data. The company also needed to access customer records 24X7 so she put in tools to automatically replicate data and automatically migrated data to new servers as they were added to the cluster. Tracy had built a highly available enterprise knowledge graph. Customer 360 For many years the company had grown by acquiring new companies. Unfortunately, the computer systems used by each company was incompatible so the customer call centers would have to put customers on hold to long into each of the 10 different computers that stored the customer information.","title":"Enterprise Knowledge Graph Stories"},{"location":"intro/stories/#enterprise-knowledge-graph-stories","text":"","title":"Enterprise Knowledge Graph Stories"},{"location":"intro/stories/#the-google-knowledge-graph","text":"On May 16, 2012, Google published the \"Things Not Strings\" blog post. Now the world knew that graphs were no longer an academic interest. Google's graph serviced millions of requests per minute and was available 24X7. Knowlege Graphs became cool. Introducing the Knowledge Graph: things, not strings","title":"The Google Knowledge Graph"},{"location":"intro/stories/#glossary-to-taxonomy-to-ontology-to-graph","text":"Tracy had a background in library science. She was asked to help a manufacturing company organize their datasets.","title":"Glossary to Taxonomy to Ontology to Graph"},{"location":"intro/stories/#stage-1-the-glossary","text":"On Tracy's first day on the job, she heard dozens of terms she had never heard before. Many of them were acronyms of internal systems and projects. She started buy writing down the terms that she didn't understand in the first column of a spreadsheet. She put the definitions of the term in the second column. She was building a business glossary.","title":"Stage 1: The Glossary"},{"location":"intro/stories/#stage-2-the-taxonomy","text":"After a while, Tracy saw some recurring patterns in her terms. Some were computer application names, some were product names and some were \"other\". She started grouping the related terms together and added another column for the category of each term. She had a concept taxonomy.","title":"Stage 2: The Taxonomy"},{"location":"intro/stories/#stage-3-the-ontology","text":"After a while, Tracy's categories started to grow and become more complex. Categories had sub-categories and now she started to see relationships between terms. Terms had broader terms and narrower terms. Some teams used different names (or labels) for the same concept. Tracy now had a graph of concepts. She had an ontology. Tracy could no longer maintain the system using a simple spreadsheet. She worked with her peers to create a web front end to a graph database so it was easy for anyone to add and update concepts.","title":"Stage 3: The Ontology"},{"location":"intro/stories/#stage-4-reference-data","text":"Her graph database continued to grow. For many concepts she was asked to store a code-set that described the valid values that data element could contain. She was building a reference data set. Here reference data started simply - a list of country codes, a list of state codes and a list of regions that included states. Then they asked her to list all the cities that they sold products. Soon she was tracking all the cities in the world and their long-lat coordinates. But this was OK, because the graph database that Tracy selected scaled well as the data complexity and size grew.","title":"Stage 4: Reference Data"},{"location":"intro/stories/#state-5-the-project-knowledge-graph","text":"The company like the fact that when Tracy was asked to add a new feature it was always done quickly. The data model scaled well and Tracy was not forced to rewrite queries as the data grew. As the request for more data continued Tracy added detailed product information and the customers that used these products. She then got regular updates of customer lists and their customer satisfaction surveys. Now multiple departments wanted access to Tracy's database. She became an enterprise resource.","title":"State 5: The Project Knowledge Graph"},{"location":"intro/stories/#state-6-the-enterprise-knowledge-graph","text":"Now that Tracy had more and more customer data and their purchase history, Tracy had to use multiple servers to manage the data. The company also needed to access customer records 24X7 so she put in tools to automatically replicate data and automatically migrated data to new servers as they were added to the cluster. Tracy had built a highly available enterprise knowledge graph.","title":"State 6: The Enterprise Knowledge Graph"},{"location":"intro/stories/#customer-360","text":"For many years the company had grown by acquiring new companies. Unfortunately, the computer systems used by each company was incompatible so the customer call centers would have to put customers on hold to long into each of the 10 different computers that stored the customer information.","title":"Customer 360"}]}